#include <minix/syslib.h>
#include <minix/drivers.h>
#include "i8254.h"

int timer_set_frequency(unsigned char timer, unsigned long freq) {

	return 1;
}

int timer_subscribe_int(void ) {

	return 1;
}

int timer_unsubscribe_int() {

	return 1;
}

void timer_int_handler() {

}

int timer_get_conf(unsigned char timer, unsigned char *st) {
	
	//retorna erro se timer introduzido nao for 0, 1 ou 2
	if(timer!='0' && timer!='1' && timer!='2'){
		printf("erro timer_get_vonf(). timer invalido");
		return 1;
	}

	unsigned long read_back_cmd= (TIMER_RB_CMD | TIMER_RB_COUNT_ /*activo em 0, logo se so queremos o status desativamos o count*/ | TIMER_RB_SEL((unsigned long)timer));

	/*escrever read back command para o control register*/
	if(sys_outb(TIMER_CTRL, read_back_cmd)!=0){
		printf("erro a escrever(sys_outb) read back cmd!");
		return 1;
	}

	unsigned long timer_port;
	if(timer=='0') timer_port=TIMER_0;
	if(timer=='1') timer_port=TIMER_1;
	if(timer=='2') timer_port=TIMER_2;

	unsigned long status;
	/*ler a resposta ao read back command*/
	if(sys_inb(timer_port, &status)!=0){
		printf("erro a ler resposta ao reab back (sys_inb)");
		return 1;
	}

	*st = status;
	return 0;
}

int timer_display_conf(unsigned char conf) {
	
	return 1;
}

int timer_test_time_base(unsigned long freq) {
	
	return 1;
}

int timer_test_int(unsigned long time) {
	
	return 1;
}

int timer_test_config(unsigned char timer) {
	
	return 1;
}
