#include <minix/drivers.h>
#include <minix/syslib.h>
#include <minix/driver.h>
#include <minix/com.h>
#include <minix/sysutil.h>
#include <limits.h>
#include <string.h>
#include <errno.h>
#include <stdio.h>
#include "video_test.h"
#include "video_gr.h"
#include "read_xpm.h"
#include "read_xpm.c"
#include "keyboard.h"
#include "i8042.h"

#define sign(a) ( ( (a) < 0 )  ?  -1   : 1 )



int video_test_init(unsigned short mode, unsigned short delay) {


	if(vg_init(mode) == NULL){
		//printf
		return 1;
	}

	sleep(delay);


	//TODO:CHECKAR exit valeu
	vg_exit();


		return 0;
	
	
}

int video_test_square(unsigned short x, unsigned short y, unsigned short size, unsigned long color) {
	
	//TODO:validar inputs

	int kbd_irq=kbc_subscribe_int();
	int ipc_status;
	message msg;
	int r;
	//int row, col;
	unsigned long scancode;

	if(kbd_irq>=0){
		kbd_irq=BIT(kbd_irq);
	} else {
		printf("Error in video_test_square::kbc_subscribe_int()\n");
		return 1;
	}

	if(vg_init(0x105) == NULL){
		//printf
		return 1;
	}
//-------------------------------------------------------------------------------------------------------
	/*for(row = (384+y)-(size/2); row < (384+y)+(size/2); row++){
		for(col= (512+x)-(size/2); col < (512+x)+(size/2); col++){
			vg_draw_pixel(col,row,color);
		}
	}*/

	vg_draw_centered_square(x,y,size,color);
	video_dump_fb();
//-------------------------------------------------------------------------------------------------------
	while(scancode != BREAKCODE_ESC) {
		/* Get a request message. */
		if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) {
			printf("driver_receive failed with: %d", r);
			continue;
		}
		if (is_ipc_notify(ipc_status)) { /* received notification */
			switch (_ENDPOINT_P(msg.m_source)) {
			case HARDWARE: /* hardware interrupt notification */
				if (msg.NOTIFY_ARG & kbd_irq) { /* subscribed interrupt */

						scancode=kbc_read();

				}

				break;
			default:
				break; /* no other notifications expected: do nothing */
			}
		} else { /* received a standard message, not a notification */
						/* no standard messages expected: do nothing */
		}
	}

	vg_exit();

	//Unsubscribe kbd interrupts
	if(kbc_unsubscribe_int()){
		printf("Unsubscribe failed\n In kbd_test_scan::kbc_unsubscribe_int()\n");
		return 1;
	}

	return 0;
	
}

int video_test_line(unsigned short xi, unsigned short yi, unsigned short xf, unsigned short yf, unsigned long color) {

	//TODO:validar inputs

	int kbd_irq=kbc_subscribe_int();
	int ipc_status;
	message msg;
	int r;
	int row, col;
	unsigned long scancode;

	if(kbd_irq>=0){
		kbd_irq=BIT(kbd_irq);
	} else {
		printf("Error in video_test_square::kbc_subscribe_int()\n");
		return 1;
	}

	if(vg_init(0x105) == NULL){
		//printf
		return 1;
	}
//-----------------------------------------------------------------------------
	/*//linha horizontal
	if(yi==yf){
		for(col=xi; col<xf; col++)
			vg_draw_pixel(col, yi, color);
	}*/

	//linha vertical
	if(xi==xf){
		for(row=yi; row<yf; row++)
			vg_draw_pixel(xi, row, color);
	}else{

	//linha diagonal
	/*plotLine(x0,y0, x1,y1)
  dx = x1 - x0
  dy = y1 - y0
  D = 2*dy - dx
  y = y0

  for x from x0 to x1
    plot(x,y)
    if D > 0
       y = y + 1
       D = D - 2*dx
    end if
    D = D + 2*dy*/
		//TODO: linkar pagina wiki com pseudocode ERRO: NAO ESTA A FUNCIONAR DIREITO!! TESTE "line 603 20 1000 900 0X3D" devia sair do ecra em bbaixo porque 680
	float dx = xf - xi;
	float dy = yf - yi;
	float derror = abs(dy/dx);
	float error = 0.0;
	int y = yi;
	int x;

	for(x = xi; x < xf; x++){
		vg_draw_pixel(x,y,color);
		error = error + derror;
		while(error>=0.5){
			y = y + sign(dy)*1;
			error = error - 1.0;
		}
	}
	}
	
	video_dump_fb();
//-----------------------------------------------------------------------------
	while(scancode != BREAKCODE_ESC) {
		/* Get a request message. */
		if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) {
			printf("driver_receive failed with: %d", r);
			continue;
		}
		if (is_ipc_notify(ipc_status)) { /* received notification */
			switch (_ENDPOINT_P(msg.m_source)) {
			case HARDWARE: /* hardware interrupt notification */
				if (msg.NOTIFY_ARG & kbd_irq) { /* subscribed interrupt */

						scancode=kbc_read();

				}

				break;
			default:
				break; /* no other notifications expected: do nothing */
			}
		} else { /* received a standard message, not a notification */
						/* no standard messages expected: do nothing */
		}
	}

	vg_exit();

	//Unsubscribe kbd interrupts
	if(kbc_unsubscribe_int()){
		printf("Unsubscribe failed\n In kbd_test_scan::kbc_unsubscribe_int()\n");
		return 1;
	}

	return 0;
	
}

int test_xpm(char *xpm[], unsigned short xi, unsigned short yi) {

	int kbd_irq=kbc_subscribe_int();
	int ipc_status;
	message msg;
	int r;
	unsigned long scancode;

	if(kbd_irq>=0){
		kbd_irq=BIT(kbd_irq);
	} else {
		printf("Error in video_test_square::kbc_subscribe_int()\n");
		return 1;
	}

	if(vg_init(0x105) == NULL){
		//printf
		return 1;
	}
	//-------------------------------------------------------------------------------------------------------
	read_xpm(xpm);
	video_dump_fb();
	//-------------------------------------------------------------------------------------------------------
	while(scancode != BREAKCODE_ESC) {
		/* Get a request message. */
		if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) {
			printf("driver_receive failed with: %d", r);
			continue;
		}
		if (is_ipc_notify(ipc_status)) { /* received notification */
			switch (_ENDPOINT_P(msg.m_source)) {
			case HARDWARE: /* hardware interrupt notification */
				if (msg.NOTIFY_ARG & kbd_irq) { /* subscribed interrupt */

						scancode=kbc_read();

				}

				break;
			default:
				break; /* no other notifications expected: do nothing */
			}
		} else { /* received a standard message, not a notification */
							/* no standard messages expected: do nothing */
		}
	}

	vg_exit();

	//Unsubscribe kbd interrupts
	if(kbc_unsubscribe_int()){
		printf("Unsubscribe failed\n In kbd_test_scan::kbc_unsubscribe_int()\n");
		return 1;
	}

	return 0;

}

int test_move(char *xpm[], unsigned short xi, unsigned short yi, unsigned short xf, unsigned short yf, short s, unsigned short f) {

	/* To be completed */

}

int test_controller() {

	/* To be completed */

}
