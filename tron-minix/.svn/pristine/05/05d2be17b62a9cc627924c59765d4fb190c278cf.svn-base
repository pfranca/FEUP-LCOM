#include <minix/drivers.h>
#include <minix/syslib.h>
#include <minix/driver.h>
#include <minix/com.h>
#include <minix/sysutil.h>
#include <limits.h>
#include <string.h>
#include <errno.h>
#include <stdio.h>
#include <math.h>
#include "video_test.h"
#include "video_gr.h"
#include "keyboard.h"
#include "i8042.h"
#include "timer.h"
#include "i8254.h"
#include "read_xpm.h"


int get_y_direction(unsigned int dir, int y, int s){

	int yi;

	switch(dir){
	case 1:
		yi = y - s;
		break;
	case 3:
		yi = y + s;
		break;
	default:
		yi = y;
		break;
	}

	return yi;
}


int get_x_direction(unsigned int dir, int x, int s){

	int xi;

	switch(dir){
	case 2:
		xi = x - s;
		break;
	case 4:
		xi = x + s;
		break;
	default:
		xi = x;
		break;
	}

	return xi;
}

int move_motorcycle(unsigned short xi, unsigned short yi, unsigned short xi2, unsigned short yi2, short s, unsigned short f) {


	int timer_irq=timer_subscribe_int();
	int kbd_irq=kbc_subscribe_int();
	int ipc_status;
	message msg;
	int r;
	unsigned long scancode;
	int direction=4, horizontal2 =6;


	if(kbd_irq>=0){
		kbd_irq=BIT(kbd_irq);
	} else {
		printf("Error in video_test_square::kbc_subscribe_int()\n");
		return 1;
	}


	if(timer_irq>=0){
		timer_irq=BIT(timer_irq);
	} else {
		printf("Error in timer_test_int::timer_subscribe_int()\n");
		return 1;
	}
	//-----------------------------------------------------------


	if(vg_init(0x105) == NULL){
		printf("Cannot initialize in graphics mode 0x105");
		return 1;
	}

	if(f < 20){
		printf("Frequency cannot be less than 20\n");
		return 1;
	}




	//--------------------------------------------
	// EXIT ON ESC
	//------------------------------------------------------------

	while( scancode != BREAKCODE_ESC) {
		/* Get a request message. */
		if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) {
			printf("driver_receive failed with: %d", r);
			continue;
		}
		if (is_ipc_notify(ipc_status)) { /* received notification */
			switch (_ENDPOINT_P(msg.m_source)) {
			case HARDWARE: /* hardware interrupt notification */


				if (msg.NOTIFY_ARG & timer_irq) { /* subscribed interrupt - timer */


					if(s > 0){
						/*if(direction==1){
							yi -=s;
						}
						if(direction==2){
							xi -=s;
						}
						if(direction==3){
							yi +=s;
						}
						if(direction==4){
							xi +=s;
						}*/

						yi = get_y_direction(direction, yi, s);
						xi = get_x_direction(direction, xi, s);

						/*yi2 = get_y_direction(horizontal2, yi2-4, s);
						xi2 = get_x_direction(horizontal2, xi2-4, s);
*/

						if(horizontal2==5){
							yi2 -=s;
						}
						if(horizontal2==6){
							xi2 -=s;
						}
						if(horizontal2==7){
							yi2 +=s;
						}
						if(horizontal2==8){
							xi2 +=s;
						}

					}

					vg_draw_centered_square(xi-500, yi, 10, 0x3D);
					vg_draw_centered_square(xi2, yi2, 10, 0x37);

				}

				if (msg.NOTIFY_ARG & kbd_irq) { /* subscribed interrupt - keyboard */
					scancode=kbc_read();
					if(scancode == BREAKCODE_W){
						direction = 1;
					}
					if(scancode == BREAKCODE_A){
						direction = 2;
					}
					if(scancode == BREAKCODE_S){
						direction = 3;
					}
					if(scancode == BREAKCODE_D){
						direction = 4;
					}
					if(scancode == BREAKCODE_8){
						horizontal2 = 5;
					}
					if(scancode == BREAKCODE_4){
						horizontal2 = 6;
					}
					if(scancode == BREAKCODE_5){
						horizontal2 = 7;
					}
					if(scancode == BREAKCODE_6){
						horizontal2 = 8;
					}
				}

				break;
			default:
				break; /* no other notifications expected: do nothing */
			}
		} else { /* received a standard message, not a notification */
						/* no standard messages expected: do nothing */
		}
	}



	vg_exit();

	//Unsubscribe timer 0 interrupts
	if( timer_unsubscribe_int()){
		printf("Unsubscribe failed\n In kbd_test_timed_scan::timer_unsubscribe_int()\n");
		return 1;
	}

	//Unsubscribe kbd interrupts
	if(kbc_unsubscribe_int()){
		printf("Unsubscribe failed\n In kbd_test_scan::kbc_unsubscribe_int()\n");
		return 1;
	}

	return 0;

}
