#include <minix/syslib.h>
#include <minix/drivers.h>
#include <minix/com.h>
#include <minix/sysutil.h>
#include "test3.h"
#include "keyboard.h"
#include "i8042.h"

/*void print_and_reset_sys_counter(){
	printf("Number of sys_inb() used: %d\n",sysinb_counter);
	sysinb_counter=0;
}*/


int kbd_test_scan(unsigned short ass) {
	if(ass==0){
		int irq_set=kbc_subscribe_int();
		int ipc_status;
		message msg;
		int r;
		unsigned long scancode;

		if(irq_set>=0){
			irq_set=BIT(irq_set);
		} else {
			printf("Error in kbd_test_scan::kbc_subscribe_int()\n");
			return 1;
		}

		while(scancode != BREAKCODE_ESC) {
			/* Get a request message. */
			if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) {
				printf("driver_receive failed with: %d", r);
				continue;
			}
			if (is_ipc_notify(ipc_status)) { /* received notification */
				switch (_ENDPOINT_P(msg.m_source)) {
				case HARDWARE: /* hardware interrupt notification */
					if (msg.NOTIFY_ARG & irq_set) { /* subscribed interrupt */

						scancode=kbc_read();
						display_scancode(scancode);
					}
					break;
				default:
					break; /* no other notifications expected: do nothing */
				}
			} else { /* received a standard message, not a notification */
					/* no standard messages expected: do nothing */
			}
		}

		//Unsubscribe kbc interrupts
		if(kbc_unsubscribe_int()){
			printf("Unsubscribe failed\n In kbd_test_scan::kbc_unsubscribe_int()\n");
			return 1;
		}
		print_and_reset_sys_counter();
		return 0;

}
}




int kbd_test_poll() {

	unsigned long scancode;

	while(scancode != BREAKCODE_ESC){
		scancode=kbc_read();
		if(scancode!=0xFFF)
			display_scancode(scancode);
	}

	print_and_reset_sys_counter();
	return 0;

}
int kbd_test_timed_scan(unsigned short n) {
    /* To be completed */
}
